@section css
{
	<style type="text/css">
		.item-list
		{
			width: 100%;
		}

		.item,
		.item-moving,
		.item-header
		{
			border: 1px solid black;
			margin: 5px;
			padding: 5px;
			background-color: #DEDEDE;
		}

		.item-header
		{
			background-color: #ababab;
		}

		.item-name
		{
			width: 200px;
			float: left;
		}

		.item-sortOrder
		{
			width: 200px;
			display: inline;
		}

		.item-moving /* Used by the sortable place holder */
		{
			/* skin */
			border: 2px dashed grey;
			background-color: #FFFFFF;
		}

		.sortableHandle
		{
			/*background-color: #ff0000;
			width:3px;*/
			cursor: move;
		}
	</style>
}

@section scripts
{
	<script src="~/Scripts/jquery.signalR-1.0.0.js"></script>
    <script src="~/signalr/hubs"></script>
}

<div id="body">
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>Welcome to ASP.NET Web API!</h1>
                <h2>Modify the code in this template to jump-start your ASP.NET Web API development.</h2>
            </hgroup>
            <p>
                ASP.NET Web API allows you to expose your applications, data and services to the
                web directly over HTTP.
            </p>
            <p>
                To learn more about ASP.NET Web API visit the
                <a href="http://go.microsoft.com/fwlink/?LinkID=238195" title="ASP.NET Web API Website">ASP.NET Web API Website</a>.
                The page features <mark>videos, tutorials, and samples</mark> to help you get the most from ASP.NET Web API.
                If you have any questions about ASP.NET Web API, visit
                <a href="http://go.microsoft.com/fwlink/?LinkID=238196" title="ASP.NET Web API Forum">our forums</a>.
            </p>
        </div>
    </section>

    <section class="content-wrapper main-content clear-fix">
        <h3>We suggest the following steps:</h3>

		<div class="item-header">
			<div class="item-name"><strong>Item Name</strong></div>
			<div class="item-sortOrder"><strong>Sort Order</strong></div>
		</div>

		<div class="item-list" data-bind="sortable: { data: items, afterMove: $root.afterMove, options: { start: sortableStart, helper: $root.fixHelper, handle: '.sortableHandle', cursor: 'move', placeholder: 'item-moving' } }">
			<div class="item">
				<div class="sortableHandle item-name"><span data-bind="text: name"></span></div>
				<div class="sortableHandle item-sortOrder"><span data-bind="text: sortOrder"></span></div>
			</div>
		</div>
    </section>
</div>

<script type="text/javascript">

	$(document).ready(function () {

		var viewModel = new SortableItemsViewModel();
		ko.applyBindings(viewModel);

		var itemsHub = $.connection.itemsHub;

		// Create a function that the hub can call back to display messages.
		itemsHub.client.updateItemSortOrder = function (id, sortOrder) {

			var items = viewModel.items();
			for (var i = 0; i < items.length; ++i) {
				var item = items[i];

				if (item.id == id) {
					// Remove this item from the list
					viewModel.items.remove(item);

					item.sortOrder(sortOrder);

					// Find the new location
					items = viewModel.items(); // Update our list
					for (var j = 0; j < items.length; ++j) {
						var item2 = items[j];

						if (item2.sortOrder() >= sortOrder) {
							viewModel.items.splice(j, 0, item);
							return;
						}
					}

					// Add to the end
					viewModel.items.push(item);
				}
			}
		};

		$.connection.hub.start().done(function () {
		});

		$.getJSON('@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "Items" })', function (data) {

			// On success, 'data' contains a list of items.
			$.each(data, function (i, value) {

				var model = new SortableItem(value.id, value.name, value.sortOrder);
				viewModel.items.push(model);

			});
		});
	});

	function SortableItem(id, name, sortOrder) {
		var self = this;

		self.id = id;
		self.name = ko.observable(name);
		self.sortOrder = ko.observable(sortOrder);
	}

	function SortableItemsViewModel() {
		var self = this;

		// Editable data
		self.items = ko.observableArray([]);

		// Return a helper with preserved width of cells
		self.fixHelper = function (e, ui) {
			ui.children().each(function () {
				$(this).width($(this).width());
			});
			return ui;
		};

		self.sortableStart = function (e, ui) {
			ui.placeholder.height(ui.item.height());
		};

		self.afterMove = function (e) {
			var item = e.item;
			var items = e.targetParent;
			var newIndex = e.targetIndex;

			// Get the item that is now before the item
			var prevItem = null;
			if (newIndex > 0) {
				prevItem = items()[newIndex - 1];
				//alert ('prev: ' + prevItem.sortOrder());
			}

			var nextItem = null;
			if (newIndex < items().length - 1) {
				nextItem = items()[newIndex + 1];
				//alert('next: ' + nextItem.sortOrder());
			}


			// Update the server
			$.ajax({
				url: '@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "Items" })/' + item.id,
				contentType: 'application/json',
				type: 'put',
				dataType: 'json',
				data: JSON.stringify({ after: (prevItem != null ? prevItem.id : -1), before: (nextItem != null ? nextItem.id : -1) }),
				success: function (data) {
				},
				error: function (data) {
				}

			});
		}
	}



</script>
